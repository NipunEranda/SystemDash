name: SystemDash Release

on:
  push:
    tags:
      - "v*"  # Trigger workflow on version tags (e.g., v1.0.0)

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install cross-compilation tools
        run: sudo apt update && sudo apt install -y build-essential gcc

      - name: Install Rust target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Compile build script
        run: gcc builder/build.c builder/functions.c -o ./build

      - name: Clean build
        run: ./build clean

      - name: Build project
        run: ./build linux

      - name: Zip artifact for deployment
        run: cd dist && zip -r systemdash-linux.zip .

      - name: Prepare artifact
        run: |
          mkdir -p release
          cp dist/systemdash-linux.zip release/systemdash-linux.zip
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemdash-linux
          path: release/systemdash-linux.zip

  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Install Rust target
        run: rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Compile build script
        run: gcc builder/build.c builder/functions.c -o ./build

      - name: Clean build
        run: ./build clean

      - name: Build project for apple aarch64
        run: ./build applearm

      - name: Zip artifact for deployment and prepare artifact
        run: |
          cd dist && zip -r systemdash-apple-aarch64.zip .
          mkdir -p release
          cp dist/systemdash-apple-aarch64.zip release/systemdash-apple-aarch64.zip
        shell: bash

      - name: Clean build
        run: ./build clean

      - name: Build project for apple x86
        run: ./build applex86

      - name: Zip artifact for deployment and prepare artifact
        run: |
          cd dist && zip -r systemdash-apple-x86.zip .
          cp dist/systemdash-apple-x86.zip release/systemdash-apple-x86.zip
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
            name: systemdash-apple-aarch64
            path: release/systemdash-apple-aarch64.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
            name: systemdash-apple-x86
            path: release/systemdash-apple-x86.zip

  build-windows:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu

      - name: Install cross-compilation tools
        run: sudo apt update && sudo apt install -y build-essential gcc gcc-mingw-w64-x86-64-win32

      - name: Install Rust target
        run: rustup target add x86_64-pc-windows-gnu

      - name: Compile build script
        run: gcc builder/build.c builder/functions.c -o ./build

      - name: Clean build
        run: ./build clean

      - name: Build project for apple x86
        run: ./build windows

      - name: Zip artifact for deployment
        run: cd dist && zip -r systemdash-windows.zip .

      - name: Prepare artifact
        run: |
          mkdir -p release
          cp dist/systemdash-windows.zip release/systemdash-windows.exe
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: systemdash-windows
          path: release/systemdash-windows.exe

  release:
    needs: 
      - build-linux
      - build-mac
      - build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/* 
          token: ${{ secrets.GITHUB_TOKEN }}
